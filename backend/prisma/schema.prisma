// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Todo {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(200)
  description String?  @db.Text
  completed   Boolean  @default(false)
  priority    Priority @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  assigneeId  String?
  projectId   String?
  
  // Relations
  tags        Tag[]
  metadata    TodoMetadata?
  assignee    User?     @relation(fields: [assigneeId], references: [id])
  project     Project?  @relation(fields: [projectId], references: [id])
  comments    Comment[]
  attachments Attachment[]
  
  // INTENTIONAL BUG: Missing indexes for search performance
  // TODO: Add indexes for common queries
  // @@index([title]) // Uncomment to fix Scenario 3
  // @@index([completed])
  // @@index([createdAt])
  @@index([assigneeId])
  @@index([projectId])
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(255)
  name      String   @db.VarChar(100)
  avatar    String?  @db.VarChar(500)
  role      UserRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  todos     Todo[]
  comments  Comment[]
  projects  ProjectMember[]
  
  @@index([email])
}

model Project {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(100)
  description String?  @db.Text
  color       String   @db.VarChar(7)
  icon        String?  @db.VarChar(50)
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  todos       Todo[]
  members     ProjectMember[]
  
  @@index([status])
}

model ProjectMember {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique @db.VarChar(50)
  color     String   @db.VarChar(7)
  todos     Todo[]
  createdAt DateTime @default(now())
  
  @@index([name])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  todoId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  todo      Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@index([todoId])
  @@index([authorId])
}

model Attachment {
  id        String   @id @default(uuid())
  filename  String   @db.VarChar(255)
  fileUrl   String   @db.VarChar(500)
  fileSize  Int      // in bytes
  mimeType  String   @db.VarChar(100)
  todoId    String
  createdAt DateTime @default(now())
  
  todo      Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)
  
  @@index([todoId])
}

model TodoMetadata {
  id              String   @id @default(uuid())
  todoId          String   @unique
  viewCount       Int      @default(0)
  lastViewedAt    DateTime?
  estimatedTime   Int?     // in minutes
  actualTime      Int?     // in minutes
  notes           String?  @db.Text
  
  todo            Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)
  
  @@index([todoId])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum UserRole {
  ADMIN
  MANAGER
  MEMBER
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  ARCHIVED
}
